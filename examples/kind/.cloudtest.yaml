---
version: 1.0
root: "./.results"  # Store all temporary artifacts inside ./results folder
timeout: 600           # 10 minutes total time in seconds.
shuffle-enabled: true   # If test shuffling are enabled
statistics:
  enabled: true   # Allow to print statistics
  interval: 30    # with 30 seconds interval

providers:
  - name: "kind"    # A name of our provider
    kind: "shell"   # A type of provider, shell indicate we need to specify all operations with shell commands.
    instances: 1    # We need to have 1 instance of cloud.
    node-count: 3   # With 3 nodes, CloudTest will validate if cloud has 3 nodes alive.
    retry: 1  # A retry count if cloud is failed to start tool will try again.
    enabled: true   # Indicate Provider is active with config by default, if set to false, values could be overriden using command line arguments.
    timeout: 300    # 5 minutes to start a cluster.
    env:
      - KIND_CLUSTER_NAME=cloudtest-kind-$(rands10)   # Generate a uniq cluster name
      - CONFIG_LOCATION=$(tempdir)/config             # Put Kubernetes configuration file here, $(tempdir) a executable variable name pointing to temporary folder.
    scripts:
      install: make kind-install                # Do install kind
      start: make kind-start                    # Use make file to start kind
      config: make kind-export-kubeconfig       # Use make file to generate kind config and put it into a file specified with CONFIG_LOCATION environment variable.
      stop: make kind-stop                      # Use make file to stop kind
      prepare: echo "Do some logic to install"  # Do some additional logic to setup cloud.
reporting:
  junit-report: "./.results/junit.xml"    # Put junit xml report into this file.
executions:
  - name: "Sample go tests"    # Name of execution configuration
    env:
      - MY_ENV_VAR="test"   # Put sample environment variable.
    root: ./tests           # A root where to find tests
    timeout: 10             # Timeout for execution configuration
    cluster-count: 1        # A number of clusters requires for this execution.
    cluster-env:
      - KUBECONFIG          # A name of cluster configuration variable to be passed with name.
    on-fail: |
      echo "Do cleanup on failure"  # In case of execution failure this script will cleanup after test
  - name: "Sample shell tests"    # Name of execution configuration
    env:
      - MY_ENV_VAR="test"   # Put sample environment variable.
    kind: shell             # Define execution with shell script.
    timeout: 10             # Timeout for execution configuration
    cluster-count: 1        # A number of clusters requires for this execution.
    run: |
      echo "Sample shell command"
    cluster-env:
      - KUBECONFIG          # A name of cluster configuration variable to be passed with name.
    on-fail: |
      echo "Do cleanup on failure"  # In case of execution failure this script will cleanup after test
